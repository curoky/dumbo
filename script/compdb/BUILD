## Replace workspace_name and dir_path as per your setup.
load("@com_grail_bazel_compdb//:aspects.bzl", "compilation_database")

compilation_database(
    name = "compdb",
    # [Optional]
    # If your exec root (value returned by `bazel info execution_root`)
    # is constant across your users, then you can supply the value here.
    # Otherwise, the default is `__EXEC_ROOT__` which you can replace in
    # the output file using `sed` or similar tool (see below).
    exec_root = "/shm/bazel/execroot/com_github_curoky_dumbo",
    # bazel query '//dumbo/...' | xargs -n 1 | awk '{print "\""$1"\","}'
    targets = [
        "//dumbo/tools/sanitizers/address:use-after-scope",
        "//dumbo/tools/sanitizers/address:use-after-return",
        "//dumbo/tools/sanitizers/address:use-after-free",
        "//dumbo/tools/sanitizers/address:stack-buffer-overflow",
        "//dumbo/tools/sanitizers/address:memory-leaks",
        "//dumbo/tools/sanitizers/address:heap-buffer-overflow",
        "//dumbo/tools/sanitizers/address:global-buffer-overflow",
        "//dumbo/tools/pmap:case0",
        "//dumbo/tools/pmap:asm",
        "//dumbo/tools/gdb:main",
        "//dumbo/system/signal:signal_kill",
        "//dumbo/system/pthread:thread_name",
        "//dumbo/standard:standard_test",
        "//dumbo/utilities:utilities",
        "//dumbo/scaffold/text/diff:google-diff",
        "//dumbo/scaffold/test/catch2:catch2_example",
        "//dumbo/scaffold/serialization/thrift:example",
        # "//dumbo/scaffold/serialization/thrift:mock_thrift",
        "//dumbo/scaffold/serialization/protobuf:type_test",
        "//dumbo/scaffold/serialization/protobuf:mock_cc_proto",
        # "//dumbo/scaffold/serialization/protobuf:mock_proto",
        "//dumbo/scaffold/serialization/msgpack:example",
        "//dumbo/scaffold/serialization/flatbuffers:type_test",
        # "//dumbo/scaffold/serialization/flatbuffers:mock_flat_includes",
        "//dumbo/scaffold/serialization/flatbuffers:mock_flat",
        # "//dumbo/scaffold/serialization/flatbuffers:mock_flat_srcs",
        "//dumbo/scaffold/serialization/fbthrift:example",
        "//dumbo/scaffold/serialization/boost:example",
        "//dumbo/scaffold/rpc/fbthrift/echo:example",
        # "//dumbo/scaffold/serialization/fbthrift:mock_fbthrift",
        "//dumbo/scaffold/reflection/usrefl:example",
        "//dumbo/scaffold/reflection/refl-cpp:example",
        "//dumbo/scaffold/reflection/nameof:example",
        "//dumbo/scaffold/parallel/tbb:tbb_example",
        "//dumbo/scaffold/parallel/taskflow:taskflow_example",
        "//dumbo/scaffold/parallel/parallel-hashmap:ph_example",
        "//dumbo/scaffold/parallel/concurrentqueue:concurrentqueue_example",
        "//dumbo/scaffold/logging/spdlog:spdlog_example",
        "//dumbo/scaffold/libevent:example",
        "//dumbo/scaffold/json:json_example",
        "//dumbo/scaffold/immer:example",
        "//dumbo/scaffold/http:http_example",
        "//dumbo/scaffold/formatting:formatting_example",
        "//dumbo/scaffold/folly:folly_example",
        "//dumbo/scaffold/flags:example",
        "//dumbo/scaffold/debug:example",
        "//dumbo/scaffold/crypto/openssl:openssl_example",
        "//dumbo/scaffold/crypto/murmurhash:murmurhash_example",
        "//dumbo/scaffold/crypto/crc32c:crc32_example",
        "//dumbo/scaffold/crypto/cityhash:cityhash_example",
        "//dumbo/scaffold/cppitertools:example",
        "//dumbo/scaffold/cpp-peglib:example",
        "//dumbo/scaffold/coroutine/folly-fibers:example",
        "//dumbo/scaffold/coroutine/boost-coroutine2:example",
        "//dumbo/scaffold/compression:example",
        "//dumbo/scaffold/boost:boost_example",
        "//dumbo/scaffold/benchmark/google_benmark/without_main:example",
        "//dumbo/scaffold/benchmark/google_benmark/simple:example",
        "//dumbo/scaffold/benchmark/catch2:example",
        "//dumbo/scaffold/abseil:abseil_example",
        "//dumbo/magic/template_meta:example",
        "//dumbo/magic/shared_ptr:shared_ptr_test",
        "//dumbo/magic/shared_ptr:shared_ptr",
        "//dumbo/magic/sfinae:example",
        "//dumbo/magic/macro:comma_in_macro",
        "//dumbo/magic/judge_main_thread:solution",
        "//dumbo/magic/init_order:main",
        "//dumbo/magic/hack_syscall:main",
        "//dumbo/magic/hack_syscall:hack",
        "//dumbo/magic/graceful_exit/backgroud_thread:solution",
        "//dumbo/magic/dlopen_plugin/plugin:echo_action",
        "//dumbo/magic/dlopen_plugin/plugin:cat_action",
        "//dumbo/magic/dlopen_plugin:action_service",
        "//dumbo/magic/dlopen_plugin/plugin:libaction",
        "//dumbo/magic/cow:cow_string_test",
        "//dumbo/magic/cow:cow_string",
        "//dumbo/intel/simd:example",
        "//dumbo/design-pattern:design_pattern",
        "//dumbo/utilities:catch2_main",
        "//dumbo/bug/stack_overflow:thread_overflow",
        "//dumbo/bug/stack_overflow:process_overflow",
        "//dumbo/benchmark/loop_unrolling:loop_unrolling_O0",
        "//dumbo/benchmark/loop_unrolling:loop_unrolling",
        "//dumbo/benchmark/container/vector:vector_bm",
        "//dumbo/benchmark/container/string:string_bm",
        "//dumbo/benchmark/container/set/hash_set:hash_set_bm",
        "//dumbo/benchmark/container/map/hash_map:hash_map_bm",
    ],
)
