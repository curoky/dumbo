[
  { symbol: [ "std::nullptr_t", private, "<cstddef>", public ] },

  # Boost IWYU hacks:
  # { include: ["<boost/predef/detail/endian_compat.h>", private, "<boost/detail/endian.hpp>", public] },
  { include: ["<boost/program_options/detail/value_semantic.hpp>", private, "<boost/program_options/value_semantic.hpp>", public] },
  { include: ["<boost/lexical_cast.hpp>", public, "<boost/program_options/value_semantic.hpp>", public] },
  { include: ["<boost/lexical_cast/bad_lexical_cast.hpp>", private, "<boost/lexical_cast.hpp>", public] },
  { include: ["<boost/program_options/detail/parsers.hpp>", private, "<boost/program_options/parsers.hpp>", public] },
  { include: ["<boost/any.hpp>", public, "<boost/program_options/value_semantic.hpp>", public] },
  # { include: ["<boost/cstdint.hpp>", public, "<cstdint>", public] },
  { include: ["<boost/detail/basic_pointerbuf.hpp>", private, "<boost/lexical_cast.hpp>", public] },
  { include: ["<boost/geometry/index/parameters.hpp>", private, "<boost/geometry/index/rtree.hpp>", public] },
  { include: ["<boost/geometry/index/detail/predicates.hpp>", private, "<boost/geometry/index/predicates.hpp>", public] },
  { include: ["<boost/geometry/index/predicates.hpp>", public, "<boost/geometry/index/rtree.hpp>", public] },
  { include: ["<boost/move/utility_core.hpp>", public, "<boost/geometry/index/rtree.hpp>", public] },
  # { include: ["<boost/variant/detail/apply_visitor_unary.hpp>", public, "<boost/geometry/index/rtree.hpp>", public] },
  { include: ["@<boost/coroutine2/detail/.*>", private, "<boost/coroutine2/coroutine.hpp>", public] },




  # Allow getting size_t from usual header
  {symbol: ["size_t", private, "<vector>", public]},
  {symbol: ["size_t", private, "<string>", public]},
  {symbol: ["size_t", private, "<array>", public]},

  # Allow getting std::pair from map header
  {symbol: ["std::pair", private, "<map>", public]},
  {symbol: ["std::pair", private, "<unordered_map>", public]},

  # Allow getting std::move/std::forward from any header
  {symbol: ["std::move", private, "<string>", public]},
  {symbol: ["std::forward", private, "<string>", public]},
  {symbol: ["std::move", private, "<vector>", public]},
  {symbol: ["std::forward", private, "<vector>", public]},
  {symbol: ["std::move", private, "<array>", public]},
  {symbol: ["std::forward", private, "<array>", public]},
  {symbol: ["std::move", private, "<mutex>", public]},
  {symbol: ["std::forward", private, "<mutex>", public]},
  {symbol: ["std::move", private, "<utility>", public]},
  {symbol: ["std::forward", private, "<utility>", public]},
]
