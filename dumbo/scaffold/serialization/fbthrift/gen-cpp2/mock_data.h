/**
 * Autogenerated by Thrift for /home/curoky/repos/cpp/dumbo/dumbo/scaffold/serialization/fbthrift/mock.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "dumbo/scaffold/serialization/fbthrift/gen-cpp2/mock_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::idl::thrift::cpp2::EnumType> {
  using type = ::idl::thrift::cpp2::EnumType;
  static constexpr const std::size_t size = 4;
  static constexpr const std::array<type, size> values = {{
    type::ZERO,
    type::ONE,
    type::TWO,
    type::THREE,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "ZERO",
    "ONE",
    "TWO",
    "THREE",
  }};
};

template <> struct TEnumDataStorage<::idl::thrift::cpp2::UnionType::Type> {
  using type = ::idl::thrift::cpp2::UnionType::Type;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::var_i16,
    type::var_i32,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "var_i16",
    "var_i32",
  }};
};

}} // apache::thrift
