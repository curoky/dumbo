/**
 * Autogenerated by Thrift for /home/curoky/repos/cpp/dumbo/dumbo/scaffold/serialization/fbthrift/mock.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "dumbo/scaffold/serialization/fbthrift/gen-cpp2/mock_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

namespace idl { namespace thrift { namespace cpp2 {

}}} // idl::thrift::cpp2
namespace std {

} // std


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::idl::thrift::cpp2::UnionType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::idl::thrift::cpp2::MockRequest> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::idl::thrift::cpp2::MockResponse> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::idl::thrift::cpp2::MockException> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace idl { namespace thrift { namespace cpp2 {

template <class Protocol_>
void UnionType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<UnionType>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16)) {
          this->set_var_i16();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->mutable_var_i16(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_var_i32();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->mutable_var_i32(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t UnionType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UnionType");
  switch(this->getType()) {
    case UnionType::Type::var_i16:
    {
      xfer += prot_->serializedFieldSize("var_i16", apache::thrift::protocol::T_I16, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->get_var_i16());
      break;
    }
    case UnionType::Type::var_i32:
    {
      xfer += prot_->serializedFieldSize("var_i32", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_var_i32());
      break;
    }
    case UnionType::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UnionType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UnionType");
  switch(this->getType()) {
    case UnionType::Type::var_i16:
    {
      xfer += prot_->serializedFieldSize("var_i16", apache::thrift::protocol::T_I16, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->get_var_i16());
      break;
    }
    case UnionType::Type::var_i32:
    {
      xfer += prot_->serializedFieldSize("var_i32", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_var_i32());
      break;
    }
    case UnionType::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UnionType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("UnionType");
  switch(this->getType()) {
    case UnionType::Type::var_i16:
    {
      xfer += prot_->writeFieldBegin("var_i16", apache::thrift::protocol::T_I16, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->get_var_i16());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case UnionType::Type::var_i32:
    {
      xfer += prot_->writeFieldBegin("var_i32", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->get_var_i32());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case UnionType::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void UnionType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t UnionType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t UnionType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t UnionType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void UnionType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t UnionType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t UnionType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t UnionType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // idl::thrift::cpp2
namespace idl { namespace thrift { namespace cpp2 {

template <class Protocol_>
void MockRequest::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_var_bool:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->var_bool, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_bool = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_var_byte:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->var_byte, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_byte = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I16))) {
    goto _loop;
  }
_readField_var_i16:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->var_i16, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_i16 = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_var_i32:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->var_i32, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_i32 = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_var_i64:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->var_i64, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_i64 = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_var_double:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->var_double, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_double = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_var_string:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->var_string);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_string = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_var_binary:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::read(*iprot, this->var_binary);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_binary = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_var_string_type:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::idl::thrift::cpp2::StrType>::read(*iprot, this->var_string_type);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_string_type = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_var_string_list:
  {
    _readState.beforeSubobject(iprot);
    
    this->var_string_list = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::read(*iprot, this->var_string_list);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_string_list = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_var_binary_list:
  {
    _readState.beforeSubobject(iprot);
    
    this->var_binary_list = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::read(*iprot, this->var_binary_list);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_binary_list = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_var_string_set:
  {
    _readState.beforeSubobject(iprot);
    
    this->var_string_set = ::std::set<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::read(*iprot, this->var_string_set);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_string_set = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_var_string_binary_map:
  {
    _readState.beforeSubobject(iprot);
    
    this->var_string_binary_map = ::std::map<::std::string, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, ::std::map<::std::string, ::std::string>>::read(*iprot, this->var_string_binary_map);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_string_binary_map = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_var_enum:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::idl::thrift::cpp2::EnumType>::readWithContext(*iprot, this->var_enum, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_enum = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_var_enum_set:
  {
    _readState.beforeSubobject(iprot);
    
    this->var_enum_set = ::std::set< ::idl::thrift::cpp2::EnumType>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, ::std::set< ::idl::thrift::cpp2::EnumType>>::read(*iprot, this->var_enum_set);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_enum_set = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_var_union:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::UnionType>::read(iprot, &this->var_union);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_union = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_var_required_i32:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->var_required_i32, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_var_optional_i32:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->var_optional_i32, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.var_optional_i32 = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MockRequest>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_var_bool;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_var_byte;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16))) {
        goto _readField_var_i16;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_var_i32;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_var_i64;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_var_double;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_var_string;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_var_binary;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_var_string_type;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_var_string_list;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_var_binary_list;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_var_string_set;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_var_string_binary_map;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_var_enum;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_var_enum_set;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_var_union;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_var_required_i32;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_var_optional_i32;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MockRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockRequest");
  xfer += prot_->serializedFieldSize("var_bool", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->var_bool);
  xfer += prot_->serializedFieldSize("var_byte", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->var_byte);
  xfer += prot_->serializedFieldSize("var_i16", apache::thrift::protocol::T_I16, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->var_i16);
  xfer += prot_->serializedFieldSize("var_i32", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_i32);
  xfer += prot_->serializedFieldSize("var_i64", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->var_i64);
  xfer += prot_->serializedFieldSize("var_double", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->var_double);
  xfer += prot_->serializedFieldSize("var_string", apache::thrift::protocol::T_STRING, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->var_string);
  xfer += prot_->serializedFieldSize("var_binary", apache::thrift::protocol::T_STRING, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->var_binary);
  xfer += prot_->serializedFieldSize("var_string_type", apache::thrift::protocol::T_STRING, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::idl::thrift::cpp2::StrType>::serializedSize<false>(*prot_, this->var_string_type);
  xfer += prot_->serializedFieldSize("var_string_list", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->var_string_list);
  xfer += prot_->serializedFieldSize("var_binary_list", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->var_binary_list);
  xfer += prot_->serializedFieldSize("var_string_set", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->var_string_set);
  xfer += prot_->serializedFieldSize("var_string_binary_map", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, ::std::map<::std::string, ::std::string>>::serializedSize<false>(*prot_, this->var_string_binary_map);
  xfer += prot_->serializedFieldSize("var_enum", apache::thrift::protocol::T_I32, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::idl::thrift::cpp2::EnumType>::serializedSize<false>(*prot_, this->var_enum);
  xfer += prot_->serializedFieldSize("var_enum_set", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, ::std::set< ::idl::thrift::cpp2::EnumType>>::serializedSize<false>(*prot_, this->var_enum_set);
  xfer += prot_->serializedFieldSize("var_union", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::UnionType>::serializedSize(prot_, &this->var_union);
  xfer += prot_->serializedFieldSize("var_required_i32", apache::thrift::protocol::T_I32, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_required_i32);
  if (this->var_optional_i32_ref().has_value()) {
    xfer += prot_->serializedFieldSize("var_optional_i32", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_optional_i32);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockRequest");
  xfer += prot_->serializedFieldSize("var_bool", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->var_bool);
  xfer += prot_->serializedFieldSize("var_byte", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->var_byte);
  xfer += prot_->serializedFieldSize("var_i16", apache::thrift::protocol::T_I16, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->var_i16);
  xfer += prot_->serializedFieldSize("var_i32", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_i32);
  xfer += prot_->serializedFieldSize("var_i64", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->var_i64);
  xfer += prot_->serializedFieldSize("var_double", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->var_double);
  xfer += prot_->serializedFieldSize("var_string", apache::thrift::protocol::T_STRING, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->var_string);
  xfer += prot_->serializedFieldSize("var_binary", apache::thrift::protocol::T_STRING, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->var_binary);
  xfer += prot_->serializedFieldSize("var_string_type", apache::thrift::protocol::T_STRING, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::idl::thrift::cpp2::StrType>::serializedSize<false>(*prot_, this->var_string_type);
  xfer += prot_->serializedFieldSize("var_string_list", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->var_string_list);
  xfer += prot_->serializedFieldSize("var_binary_list", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->var_binary_list);
  xfer += prot_->serializedFieldSize("var_string_set", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->var_string_set);
  xfer += prot_->serializedFieldSize("var_string_binary_map", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, ::std::map<::std::string, ::std::string>>::serializedSize<false>(*prot_, this->var_string_binary_map);
  xfer += prot_->serializedFieldSize("var_enum", apache::thrift::protocol::T_I32, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::idl::thrift::cpp2::EnumType>::serializedSize<false>(*prot_, this->var_enum);
  xfer += prot_->serializedFieldSize("var_enum_set", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, ::std::set< ::idl::thrift::cpp2::EnumType>>::serializedSize<false>(*prot_, this->var_enum_set);
  xfer += prot_->serializedFieldSize("var_union", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::UnionType>::serializedSizeZC(prot_, &this->var_union);
  xfer += prot_->serializedFieldSize("var_required_i32", apache::thrift::protocol::T_I32, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_required_i32);
  if (this->var_optional_i32_ref().has_value()) {
    xfer += prot_->serializedFieldSize("var_optional_i32", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->var_optional_i32);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MockRequest");
  xfer += prot_->writeFieldBegin("var_bool", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->var_bool);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_byte", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->var_byte);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_i16", apache::thrift::protocol::T_I16, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->var_i16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_i32", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->var_i32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_i64", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->var_i64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_double", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->var_double);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_string", apache::thrift::protocol::T_STRING, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->var_string);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_binary", apache::thrift::protocol::T_STRING, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->var_binary);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_string_type", apache::thrift::protocol::T_STRING, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::idl::thrift::cpp2::StrType>::write(*prot_, this->var_string_type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_string_list", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::write(*prot_, this->var_string_list);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_binary_list", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::write(*prot_, this->var_binary_list);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_string_set", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::write(*prot_, this->var_string_set);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_string_binary_map", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, ::std::map<::std::string, ::std::string>>::write(*prot_, this->var_string_binary_map);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_enum", apache::thrift::protocol::T_I32, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::idl::thrift::cpp2::EnumType>::write(*prot_, this->var_enum);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_enum_set", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, ::std::set< ::idl::thrift::cpp2::EnumType>>::write(*prot_, this->var_enum_set);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_union", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::UnionType>::write(prot_, &this->var_union);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("var_required_i32", apache::thrift::protocol::T_I32, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->var_required_i32);
  xfer += prot_->writeFieldEnd();
  if (this->var_optional_i32_ref().has_value()) {
    xfer += prot_->writeFieldBegin("var_optional_i32", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->var_optional_i32);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MockRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MockRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MockRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MockRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MockRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MockRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MockRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MockRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // idl::thrift::cpp2
namespace idl { namespace thrift { namespace cpp2 {

template <class Protocol_>
void MockResponse::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::MockRequest>::read(iprot, &this->req);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.req = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MockResponse>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_req;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MockResponse::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockResponse");
  xfer += prot_->serializedFieldSize("req", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::MockRequest>::serializedSize(prot_, &this->req);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockResponse::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockResponse");
  xfer += prot_->serializedFieldSize("req", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::MockRequest>::serializedSizeZC(prot_, &this->req);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockResponse::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MockResponse");
  xfer += prot_->writeFieldBegin("req", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::idl::thrift::cpp2::MockRequest>::write(prot_, &this->req);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MockResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MockResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MockResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MockResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MockResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MockResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MockResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MockResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // idl::thrift::cpp2
namespace idl { namespace thrift { namespace cpp2 {

template <class Protocol_>
void MockException::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_msg:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->msg);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.msg = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MockException>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_msg;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MockException::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockException");
  xfer += prot_->serializedFieldSize("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->msg);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockException::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MockException");
  xfer += prot_->serializedFieldSize("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->msg);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MockException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MockException");
  xfer += prot_->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->msg);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MockException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MockException::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MockException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MockException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MockException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MockException::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MockException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MockException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // idl::thrift::cpp2
