/**
 * Autogenerated by Thrift for /home/curoky/repos/cpp/dumbo/dumbo/scaffold/serialization/fbthrift/mock.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "dumbo/scaffold/serialization/fbthrift/gen-cpp2/mock_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::idl::thrift::cpp2::EnumType>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("mock.EnumType", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "mock.EnumType";
  using EnumTraits = TEnumTraits<::idl::thrift::cpp2::EnumType>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::idl::thrift::cpp2::UnionType>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("mock.UnionType", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& mock_UnionType = res.first->second;
  mock_UnionType.name_ref() = "mock.UnionType";
  mock_UnionType.is_union_ref() = true;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  mock_UnionType_fields[] = {
    std::make_tuple(1, "var_i16", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
    std::make_tuple(2, "var_i32", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
  };
  for (const auto& f : mock_UnionType_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    mock_UnionType.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::idl::thrift::cpp2::MockRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("mock.MockRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& mock_MockRequest = res.first->second;
  mock_MockRequest.name_ref() = "mock.MockRequest";
  mock_MockRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  mock_MockRequest_fields[] = {
    std::make_tuple(1, "var_bool", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE)),
    std::make_tuple(2, "var_byte", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE)),
    std::make_tuple(3, "var_i16", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
    std::make_tuple(4, "var_i32", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
    std::make_tuple(5, "var_i64", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)),
    std::make_tuple(6, "var_double", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE)),
    std::make_tuple(7, "var_string", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(8, "var_binary", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)),
    std::make_tuple(9, "var_string_type", false, std::make_unique<Typedef>("mock.StrType", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))),
    std::make_tuple(10, "var_string_list", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))),
    std::make_tuple(11, "var_binary_list", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
    std::make_tuple(12, "var_string_set", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))),
    std::make_tuple(13, "var_string_binary_map", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
    std::make_tuple(14, "var_enum", false, std::make_unique<Enum< ::idl::thrift::cpp2::EnumType>>("mock.EnumType")),
    std::make_tuple(15, "var_enum_set", false, std::make_unique<Set>(std::make_unique<Enum< ::idl::thrift::cpp2::EnumType>>("mock.EnumType"))),
    std::make_tuple(16, "var_union", false, std::make_unique<Union< ::idl::thrift::cpp2::UnionType>>("mock.UnionType")),
    std::make_tuple(17, "var_required_i32", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
    std::make_tuple(18, "var_optional_i32", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
  };
  for (const auto& f : mock_MockRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    mock_MockRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::idl::thrift::cpp2::MockResponse>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("mock.MockResponse", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& mock_MockResponse = res.first->second;
  mock_MockResponse.name_ref() = "mock.MockResponse";
  mock_MockResponse.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  mock_MockResponse_fields[] = {
    std::make_tuple(1, "req", false, std::make_unique<Struct< ::idl::thrift::cpp2::MockRequest>>("mock.MockRequest")),
  };
  for (const auto& f : mock_MockResponse_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    mock_MockResponse.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::idl::thrift::cpp2::MockException>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("mock.MockException", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& mock_MockException = res.first->second;
  mock_MockException.name_ref() = "mock.MockException";
  mock_MockException.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  mock_MockException_fields[] = {
    std::make_tuple(1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
  };
  for (const auto& f : mock_MockException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    mock_MockException.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

void ExceptionMetadata<::idl::thrift::cpp2::MockException>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions_ref()->emplace("mock.MockException", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& mock_MockException = res.first->second;
  mock_MockException.name_ref() = "mock.MockException";
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  mock_MockException_fields[] = {
    std::make_tuple(1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
  };
  for (const auto& f : mock_MockException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    mock_MockException.fields_ref()->push_back(std::move(field));
  }
}
void ServiceMetadata<::idl::thrift::cpp2::EchoServiceSvIf>::gen_echo(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "echo";
  auto func_ret_type = std::make_unique<Struct< ::idl::thrift::cpp2::MockResponse>>("mock.MockResponse");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField mock_EchoService_echo_req_1;
  mock_EchoService_echo_req_1.id_ref() = 1;
  mock_EchoService_echo_req_1.name_ref() = "req";
  mock_EchoService_echo_req_1.is_optional_ref() = false;
  auto mock_EchoService_echo_req_1_type = std::make_unique<Struct< ::idl::thrift::cpp2::MockRequest>>("mock.MockRequest");
  mock_EchoService_echo_req_1_type->writeAndGenType(*mock_EchoService_echo_req_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(mock_EchoService_echo_req_1));
  ::apache::thrift::metadata::ThriftField mock_EchoService_echo_ex_1;
  mock_EchoService_echo_ex_1.id_ref() = 1;
  mock_EchoService_echo_ex_1.name_ref() = "ex";
  mock_EchoService_echo_ex_1.is_optional_ref() = false;
  auto mock_EchoService_echo_ex_1_type = std::make_unique<Struct< ::idl::thrift::cpp2::MockException>>("mock.MockException");
  mock_EchoService_echo_ex_1_type->writeAndGenType(*mock_EchoService_echo_ex_1.type_ref(), metadata);
  func.exceptions_ref()->push_back(std::move(mock_EchoService_echo_ex_1));
  ExceptionMetadata< ::idl::thrift::cpp2::MockException>::gen(metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::idl::thrift::cpp2::EchoServiceSvIf>::gen_oneway_echo(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "oneway_echo";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField mock_EchoService_oneway_echo_req_1;
  mock_EchoService_oneway_echo_req_1.id_ref() = 1;
  mock_EchoService_oneway_echo_req_1.name_ref() = "req";
  mock_EchoService_oneway_echo_req_1.is_optional_ref() = false;
  auto mock_EchoService_oneway_echo_req_1_type = std::make_unique<Struct< ::idl::thrift::cpp2::MockRequest>>("mock.MockRequest");
  mock_EchoService_oneway_echo_req_1_type->writeAndGenType(*mock_EchoService_oneway_echo_req_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(mock_EchoService_oneway_echo_req_1));
  func.is_oneway_ref() = true;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::idl::thrift::cpp2::EchoServiceSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService mock_EchoService;
  mock_EchoService.name_ref() = "mock.EchoService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::idl::thrift::cpp2::EchoServiceSvIf>::gen_echo,
    ServiceMetadata<::idl::thrift::cpp2::EchoServiceSvIf>::gen_oneway_echo,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, mock_EchoService);
  }
  context.service_info_ref() = std::move(mock_EchoService);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "mock";
  context.module_ref() = std::move(module);
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
